/***************************************************************************
    Original code written in: May 2006    
    copyright: (C) Carlucio Santos Cordeiro
 ***************************************************************************/
template <class Float>
inline Matrix4<Float>::Matrix4()
{}


template <class Float>
inline Matrix4<Float>::Matrix4(const Vector4<Float>& v1, const Vector4<Float>& v2, const Vector4<Float>& v3, const Vector4<Float>& v4)
{
   m[0][0]=v1.x; m[0][1]=v2.x; m[0][2]=v3.x; m[0][3]=v3.x;
   m[1][0]=v1.y; m[1][1]=v2.y; m[1][2]=v3.y; m[1][3]=v3.y;
   m[2][0]=v1.z; m[2][1]=v2.z; m[2][2]=v3.z; m[2][3]=v3.z;
   m[3][0]=v1.w; m[3][1]=v2.w; m[3][2]=v3.w; m[3][3]=v3.w;
}


//-------------------------------------------------------------------------//
template <class Float>
inline Matrix4<Float>::Matrix4(Float m00, Float m01, Float m02, Float m03,
                        Float m10, Float m11, Float m12, Float m13,
                        Float m20, Float m21, Float m22, Float m23,
                        Float m30, Float m31, Float m32, Float m33 )
{
   m[0][0]=m00 ; m[0][1]=m01 ; m[0][2]=m02 ; m[0][3]=m03;
   m[1][0]=m10 ; m[1][1]=m11 ; m[1][2]=m12 ; m[1][3]=m13;
   m[2][0]=m20 ; m[2][1]=m21 ; m[2][2]=m22 ; m[2][3]=m23;
   m[3][0]=m30 ; m[3][1]=m31 ; m[3][2]=m32 ; m[3][3]=m33;
}


//-------------------------------------------------------------------------//
template <class Float>
inline Matrix4<Float>::Matrix4(Float* a)
{
   memcpy(this, a, 16*sizeof(Float));
}


//-------------------------------------------------------------------------//
template <class Float>
inline Matrix4<Float>::Matrix4(const Matrix4<Float>& a)
{
   m[0][0]=(a.m[0][0]); m[0][1]=(a.m[0][1]); m[0][2]=(a.m[0][2]); m[0][3]=(a.m[0][3]);
   m[1][0]=(a.m[1][0]); m[1][1]=(a.m[1][1]); m[1][2]=(a.m[1][2]); m[1][3]=(a.m[1][3]);
   m[2][0]=(a.m[2][0]); m[2][1]=(a.m[2][1]); m[2][2]=(a.m[2][2]); m[2][3]=(a.m[2][3]);
   m[3][0]=(a.m[3][0]); m[3][1]=(a.m[3][1]); m[3][2]=(a.m[3][2]); m[3][3]=(a.m[3][3]);
}


//-------------------------------------------------------------------------//
template <class Float>
inline bool Matrix4<Float>::operator== (const Matrix4<Float>& a) const
{
   return (m[0][0]==a.m[0][0] && m[0][1]==a.m[0][1] && m[0][2]==a.m[0][2] && m[0][3]==a.m[0][3] &&
           m[1][0]==a.m[1][0] && m[1][1]==a.m[1][1] && m[1][2]==a.m[1][2] && m[1][3]==a.m[1][3] &&
           m[2][0]==a.m[2][0] && m[2][1]==a.m[2][1] && m[2][2]==a.m[2][2] && m[2][3]==a.m[2][3] &&
           m[3][0]==a.m[3][0] && m[3][1]==a.m[3][1] && m[3][2]==a.m[3][2] && m[3][3]==a.m[3][3] );
}


//-------------------------------------------------------------------------//
template <class Float>
inline bool Matrix4<Float>::operator!= (const Matrix4<Float>& a) const
{
   return (m[0][0]!=a.m[0][0] || m[0][1]!=a.m[0][1] || m[0][2]!=a.m[0][2] || m[0][3]!=a.m[0][3] ||
           m[1][0]!=a.m[1][0] || m[1][1]!=a.m[1][1] || m[1][2]!=a.m[1][2] || m[1][3]!=a.m[1][3] ||
           m[2][0]!=a.m[2][0] || m[2][1]!=a.m[2][1] || m[2][2]!=a.m[2][2] || m[2][3]!=a.m[2][3] ||
           m[3][0]!=a.m[3][0] || m[3][1]!=a.m[3][1] || m[3][2]!=a.m[3][2] || m[3][3]!=a.m[3][3] );
}


//-------------------------------------------------------------------------//
template <class Float>
inline Matrix4<Float>& Matrix4<Float>::operator+= (const Matrix4<Float>& a)
{
   m[0][0]+=a.m[0][0] ; m[0][1]+=a.m[0][1] ; m[0][2]+=a.m[0][2] ; m[0][3]+=a.m[0][3] ;
   m[1][0]+=a.m[1][0] ; m[1][1]+=a.m[1][1] ; m[1][2]+=a.m[1][2] ; m[1][3]+=a.m[1][3] ;
   m[2][0]+=a.m[2][0] ; m[2][1]+=a.m[2][1] ; m[2][2]+=a.m[2][2] ; m[2][3]+=a.m[2][3] ;
   m[3][0]+=a.m[3][0] ; m[3][1]+=a.m[3][1] ; m[3][2]+=a.m[3][2] ; m[3][3]+=a.m[3][3] ;
   return *this;
}


//-------------------------------------------------------------------------//
template <class Float>
inline Matrix4<Float>& Matrix4<Float>::operator-= (const Matrix4<Float>& a)
{
   m[0][0]-=a.m[0][0] ; m[0][1]-=a.m[0][1] ; m[0][2]-=a.m[0][2] ; m[0][3]-=a.m[0][3] ;
   m[1][0]-=a.m[1][0] ; m[1][1]-=a.m[1][1] ; m[1][2]-=a.m[1][2] ; m[1][3]-=a.m[1][3] ;
   m[2][0]-=a.m[2][0] ; m[2][1]-=a.m[2][1] ; m[2][2]-=a.m[2][2] ; m[2][3]-=a.m[2][3] ;
   m[3][0]-=a.m[3][0] ; m[3][1]-=a.m[3][1] ; m[3][2]-=a.m[3][2] ; m[3][3]-=a.m[3][3] ;
   return *this;
}


//-------------------------------------------------------------------------//
template <class Float>
inline Matrix4<Float>& Matrix4<Float>::operator*= (const Matrix4<Float>& a)
{
   Matrix4<Float> tmp
   ( m[0][0]*a.m[0][0] + m[0][1]*a.m[1][0] + m[0][2]*a.m[2][0] + m[0][3]*a.m[3][0],
     m[0][0]*a.m[0][1] + m[0][1]*a.m[1][1] + m[0][2]*a.m[2][1] + m[0][3]*a.m[3][1],
     m[0][0]*a.m[0][2] + m[0][1]*a.m[1][2] + m[0][2]*a.m[2][2] + m[0][3]*a.m[3][2],
     m[0][0]*a.m[0][3] + m[0][1]*a.m[1][3] + m[0][2]*a.m[2][3] + m[0][3]*a.m[3][3],

     m[1][0]*a.m[0][0] + m[1][1]*a.m[1][0] + m[1][2]*a.m[2][0] + m[1][3]*a.m[3][0],
     m[1][0]*a.m[0][1] + m[1][1]*a.m[1][1] + m[1][2]*a.m[2][1] + m[1][3]*a.m[3][1],
     m[1][0]*a.m[0][2] + m[1][1]*a.m[1][2] + m[1][2]*a.m[2][2] + m[1][3]*a.m[3][2],
     m[1][0]*a.m[0][3] + m[1][1]*a.m[1][3] + m[1][2]*a.m[2][3] + m[1][3]*a.m[3][3],

     m[2][0]*a.m[0][0] + m[2][1]*a.m[1][0] + m[2][2]*a.m[2][0] + m[2][3]*a.m[3][0],
     m[2][0]*a.m[0][1] + m[2][1]*a.m[1][1] + m[2][2]*a.m[2][1] + m[2][3]*a.m[3][1],
     m[2][0]*a.m[0][2] + m[2][1]*a.m[1][2] + m[2][2]*a.m[2][2] + m[2][3]*a.m[3][2],
     m[2][0]*a.m[0][3] + m[2][1]*a.m[1][3] + m[2][2]*a.m[2][3] + m[2][3]*a.m[3][3],

     m[3][0]*a.m[0][0] + m[3][1]*a.m[1][0] + m[3][2]*a.m[2][0] + m[3][3]*a.m[3][0],
     m[3][0]*a.m[0][1] + m[3][1]*a.m[1][1] + m[3][2]*a.m[2][1] + m[3][3]*a.m[3][1],
     m[3][0]*a.m[0][2] + m[3][1]*a.m[1][2] + m[3][2]*a.m[2][2] + m[3][3]*a.m[3][2],
     m[3][0]*a.m[0][3] + m[3][1]*a.m[1][3] + m[3][2]*a.m[2][3] + m[3][3]*a.m[3][3] );

   return ((*this)=tmp);
}

//-------------------------------------------------------------------------//

template <class Float>
inline Matrix4<Float>& Matrix4<Float>::operator^= (const Matrix4<Float>& a)
{
   m[0][0]*=a.m[0][0] ; m[0][1]*=a.m[0][1] ; m[0][2]*=a.m[0][2] ; m[0][3]*=a.m[0][3] ;
   m[1][0]*=a.m[1][0] ; m[1][1]*=a.m[1][1] ; m[1][2]*=a.m[1][2] ; m[1][3]*=a.m[1][3] ;
   m[2][0]*=a.m[2][0] ; m[2][1]*=a.m[2][1] ; m[2][2]*=a.m[2][2] ; m[2][3]*=a.m[2][3] ;
   m[3][0]*=a.m[3][0] ; m[3][1]*=a.m[3][1] ; m[3][2]*=a.m[3][2] ; m[3][3]*=a.m[3][3] ;

   return *this;
}


//-------------------------------------------------------------------------//
// arithmetic operations

template <class Float>
inline Matrix4<Float> Matrix4<Float>::operator+ (const Matrix4<Float>& a) const
{
   return Matrix4<Float>
   ( m[0][0]+a.m[0][0] , m[0][1]+a.m[0][1] , m[0][2]+a.m[0][2] , m[0][3]+a.m[0][3],
     m[1][0]+a.m[1][0] , m[1][1]+a.m[1][1] , m[1][2]+a.m[1][2] , m[1][3]+a.m[1][3],
     m[2][0]+a.m[2][0] , m[2][1]+a.m[2][1] , m[2][2]+a.m[2][2] , m[2][3]+a.m[2][3],
     m[3][0]+a.m[3][0] , m[3][1]+a.m[3][1] , m[3][2]+a.m[3][2] , m[3][3]+a.m[3][3] );
}

//-------------------------------------------------------------------------//

template <class Float>
inline Matrix4<Float> Matrix4<Float>::operator- (const Matrix4<Float>& a) const
{
   return Matrix4<Float>
   ( m[0][0]-a.m[0][0] , m[0][1]-a.m[0][1] , m[0][2]-a.m[0][2] , m[0][3]-a.m[0][3],
     m[1][0]-a.m[1][0] , m[1][1]-a.m[1][1] , m[1][2]-a.m[1][2] , m[1][3]-a.m[1][3],
     m[2][0]-a.m[2][0] , m[2][1]-a.m[2][1] , m[2][2]-a.m[2][2] , m[2][3]-a.m[2][3],
     m[3][0]-a.m[3][0] , m[3][1]-a.m[3][1] , m[3][2]-a.m[3][2] , m[3][3]-a.m[3][3] );
}

//-------------------------------------------------------------------------//

template <class Float>
inline Matrix4<Float> Matrix4<Float>::operator* (const Matrix4<Float>& a) const
{
   return Matrix4<Float>
   ( m[0][0]*a.m[0][0] + m[0][1]*a.m[1][0] + m[0][2]*a.m[2][0] + m[0][3]*a.m[3][0],
     m[0][0]*a.m[0][1] + m[0][1]*a.m[1][1] + m[0][2]*a.m[2][1] + m[0][3]*a.m[3][1],
     m[0][0]*a.m[0][2] + m[0][1]*a.m[1][2] + m[0][2]*a.m[2][2] + m[0][3]*a.m[3][2],
     m[0][0]*a.m[0][3] + m[0][1]*a.m[1][3] + m[0][2]*a.m[2][3] + m[0][3]*a.m[3][3],

     m[1][0]*a.m[0][0] + m[1][1]*a.m[1][0] + m[1][2]*a.m[2][0] + m[1][3]*a.m[3][0],
     m[1][0]*a.m[0][1] + m[1][1]*a.m[1][1] + m[1][2]*a.m[2][1] + m[1][3]*a.m[3][1],
     m[1][0]*a.m[0][2] + m[1][1]*a.m[1][2] + m[1][2]*a.m[2][2] + m[1][3]*a.m[3][2],
     m[1][0]*a.m[0][3] + m[1][1]*a.m[1][3] + m[1][2]*a.m[2][3] + m[1][3]*a.m[3][3],

     m[2][0]*a.m[0][0] + m[2][1]*a.m[1][0] + m[2][2]*a.m[2][0] + m[2][3]*a.m[3][0],
     m[2][0]*a.m[0][1] + m[2][1]*a.m[1][1] + m[2][2]*a.m[2][1] + m[2][3]*a.m[3][1],
     m[2][0]*a.m[0][2] + m[2][1]*a.m[1][2] + m[2][2]*a.m[2][2] + m[2][3]*a.m[3][2],
     m[2][0]*a.m[0][3] + m[2][1]*a.m[1][3] + m[2][2]*a.m[2][3] + m[2][3]*a.m[3][3],

     m[3][0]*a.m[0][0] + m[3][1]*a.m[1][0] + m[3][2]*a.m[2][0] + m[3][3]*a.m[3][0],
     m[3][0]*a.m[0][1] + m[3][1]*a.m[1][1] + m[3][2]*a.m[2][1] + m[3][3]*a.m[3][1],
     m[3][0]*a.m[0][2] + m[3][1]*a.m[1][2] + m[3][2]*a.m[2][2] + m[3][3]*a.m[3][2],
     m[3][0]*a.m[0][3] + m[3][1]*a.m[1][3] + m[3][2]*a.m[2][3] + m[3][3]*a.m[3][3] );
}

//-------------------------------------------------------------------------//

template <class Float>
inline Matrix4<Float> Matrix4<Float>::operator* (Float a) const
{
   return Matrix4<Float>
   ( m[0][0]*a , m[0][1]*a , m[0][2]*a , m[0][3]*a ,
     m[1][0]*a , m[1][1]*a , m[1][2]*a , m[1][3]*a ,
     m[2][0]*a , m[2][1]*a , m[2][2]*a , m[2][3]*a ,
     m[3][0]*a , m[3][1]*a , m[3][2]*a , m[3][3]*a );
}

//-------------------------------------------------------------------------//

template <class Float>
inline Vector4<Float> Matrix4<Float>::operator* (const Vector4<Float>& v) const
{
   return Vector4<Float>
   ( m[0][0]*v[0] + m[0][1]*v[1] + m[0][2]*v[2] + m[0][3]*v[3] ,
     m[1][0]*v[0] + m[1][1]*v[1] + m[1][2]*v[2] + m[1][3]*v[3] ,
     m[2][0]*v[0] + m[2][1]*v[1] + m[2][2]*v[2] + m[2][3]*v[3] ,
     m[3][0]*v[0] + m[3][1]*v[1] + m[3][2]*v[2] + m[3][3]*v[3] );
}

//-------------------------------------------------------------------------//

template <class Float>
inline Matrix4<Float> Matrix4<Float>::operator- () const
{
   return Matrix4<Float>
   ( -m[0][0] , -m[0][1] , -m[0][2] , -m[0][3] ,
     -m[1][0] , -m[1][1] , -m[1][2] , -m[1][3] ,
     -m[2][0] , -m[2][1] , -m[2][2] , -m[2][3] ,
     -m[3][0] , -m[3][1] , -m[3][2] , -m[3][3] );
}

//-------------------------------------------------------------------------//

template <class Float>
inline Matrix4<Float> operator* (Float a, const Matrix4<Float>& m)
{
   return Matrix4<Float>
   ( m.m[0][0]*a , m.m[0][1]*a , m.m[0][2]*a , m.m[0][3]*a ,
     m.m[1][0]*a , m.m[1][1]*a , m.m[1][2]*a , m.m[1][3]*a ,
     m.m[2][0]*a , m.m[2][1]*a , m.m[2][2]*a , m.m[2][3]*a ,
     m.m[3][0]*a , m.m[3][1]*a , m.m[3][2]*a , m.m[3][3]*a );
}

//-------------------------------------------------------------------------//
// std output operator

template <class Float>
inline std::ostream& operator<< (std::ostream& s, const Matrix4<Float>& m)
{
   return s
   << '[' << m.m[0][0] << " , " << m.m[0][1] << " , "  << m.m[0][2] << " , "  << m.m[0][3] << "]\n"
   << '[' << m.m[1][0] << " , " << m.m[1][1] << " , "  << m.m[1][2] << " , "  << m.m[1][3] << "]\n"
   << '[' << m.m[2][0] << " , " << m.m[2][1] << " , "  << m.m[2][2] << " , "  << m.m[2][3] << "]\n"
   << '[' << m.m[3][0] << " , " << m.m[3][1] << " , "  << m.m[3][2] << " , "  << m.m[3][3] << "]\n";
}

//-------------------------------------------------------------------------//

template <class Float>
inline void Matrix4<Float>::set(Float m00, Float m01, Float m02, Float m03,
                             Float m10, Float m11, Float m12, Float m13,
                             Float m20, Float m21, Float m22, Float m23,
                             Float m30, Float m31, Float m32, Float m33 )
{
   m[0][0]=m00 ; m[0][1]=m01 ; m[0][2]=m02 ; m[0][3]=m03;
   m[1][0]=m10 ; m[1][1]=m11 ; m[1][2]=m12 ; m[1][3]=m13;
   m[2][0]=m20 ; m[2][1]=m21 ; m[2][2]=m22 ; m[2][3]=m23;
   m[3][0]=m30 ; m[3][1]=m31 ; m[3][2]=m32 ; m[3][3]=m33;
}

//-------------------------------------------------------------------------//

template <class Float>
inline Float Matrix4<Float>::det() const
{
   return ( m[0][0]*m[1][1]*m[2][2] +
            m[1][0]*m[2][1]*m[0][2] +
            m[0][1]*m[1][2]*m[2][0] )
          -
          ( m[0][2]*m[1][1]*m[2][0] +
            m[1][2]*m[2][1]*m[0][0] +
            m[2][2]*m[1][0]*m[0][1] );
}

//-------------------------------------------------------------------------//

template <class Float>
inline void Matrix4<Float>::neg()
{
   m[0][0] = -m[0][0] ; m[0][1] = -m[0][1] ; m[0][2] = -m[0][2] ; m[0][3] = -m[0][3];
   m[1][0] = -m[1][0] ; m[1][1] = -m[1][1] ; m[1][2] = -m[1][2] ; m[1][3] = -m[1][3];
   m[2][0] = -m[2][0] ; m[2][1] = -m[2][1] ; m[2][2] = -m[2][2] ; m[2][3] = -m[2][3];
   m[3][0] = -m[3][0] ; m[3][1] = -m[3][1] ; m[3][2] = -m[3][2] ; m[3][3] = -m[3][3];
}

//-------------------------------------------------------------------------//

template <class Float>
inline void Matrix4<Float>::add(const Matrix4<Float>& a, const Matrix4<Float>& b)
{
   m[0][0] = a.m[0][0] + b.m[0][0];
   m[0][1] = a.m[0][1] + b.m[0][1];
   m[0][2] = a.m[0][2] + b.m[0][2];
   m[0][3] = a.m[0][3] + b.m[0][3];

   m[1][0] = a.m[1][0] + b.m[1][0];
   m[1][1] = a.m[1][1] + b.m[1][1];
   m[1][2] = a.m[1][2] + b.m[1][2];
   m[1][3] = a.m[1][3] + b.m[1][3];

   m[2][0] = a.m[2][0] + b.m[2][0];
   m[2][1] = a.m[2][1] + b.m[2][1];
   m[2][2] = a.m[2][2] + b.m[2][2];
   m[2][3] = a.m[2][3] + b.m[2][3];

   m[3][0] = a.m[3][0] + b.m[3][0];
   m[3][1] = a.m[3][1] + b.m[3][1];
   m[3][2] = a.m[3][2] + b.m[3][2];
   m[3][3] = a.m[3][3] + b.m[3][3];
}

//-------------------------------------------------------------------------//

template <class Float>
inline void Matrix4<Float>::sub(const Matrix4<Float>& a, const Matrix4<Float>& b)
{
   m[0][0] = a.m[0][0] - b.m[0][0];
   m[0][1] = a.m[0][1] - b.m[0][1];
   m[0][2] = a.m[0][2] - b.m[0][2];
   m[0][3] = a.m[0][3] - b.m[0][3];

   m[1][0] = a.m[1][0] - b.m[1][0];
   m[1][1] = a.m[1][1] - b.m[1][1];
   m[1][2] = a.m[1][2] - b.m[1][2];
   m[1][3] = a.m[1][3] - b.m[1][3];

   m[2][0] = a.m[2][0] - b.m[2][0];
   m[2][1] = a.m[2][1] - b.m[2][1];
   m[2][2] = a.m[2][2] - b.m[2][2];
   m[2][3] = a.m[2][3] - b.m[2][3];

   m[3][0] = a.m[3][0] - b.m[3][0];
   m[3][1] = a.m[3][1] - b.m[3][1];
   m[3][2] = a.m[3][2] - b.m[3][2];
   m[3][3] = a.m[3][3] - b.m[3][3];
}

//-------------------------------------------------------------------------//

template <class Float>
inline void Matrix4<Float>::mul(const Matrix4<Float>& a, const Matrix4<Float>& b)
{
   m[0][0] = a.m[0][0]*b.m[0][0] + a.m[0][1]*b.m[1][0] + a.m[0][2]*b.m[2][0] + a.m[0][3]*b.m[3][0];
   m[0][1] = a.m[0][0]*b.m[0][1] + a.m[0][1]*b.m[1][1] + a.m[0][2]*b.m[2][1] + a.m[0][3]*b.m[3][1];
   m[0][2] = a.m[0][0]*b.m[0][2] + a.m[0][1]*b.m[1][2] + a.m[0][2]*b.m[2][2] + a.m[0][3]*b.m[3][2];
   m[0][3] = a.m[0][0]*b.m[0][3] + a.m[0][1]*b.m[1][3] + a.m[0][2]*b.m[2][3] + a.m[0][3]*b.m[3][3];

   m[1][0] = a.m[1][0]*b.m[0][0] + a.m[1][1]*b.m[1][0] + a.m[1][2]*b.m[2][0] + a.m[1][3]*b.m[3][0];
   m[1][1] = a.m[1][0]*b.m[0][1] + a.m[1][1]*b.m[1][1] + a.m[1][2]*b.m[2][1] + a.m[1][3]*b.m[3][1];
   m[1][2] = a.m[1][0]*b.m[0][2] + a.m[1][1]*b.m[1][2] + a.m[1][2]*b.m[2][2] + a.m[1][3]*b.m[3][2];
   m[1][3] = a.m[1][0]*b.m[0][3] + a.m[1][1]*b.m[1][3] + a.m[1][2]*b.m[2][3] + a.m[1][3]*b.m[3][3];

   m[2][0] = a.m[2][0]*b.m[0][0] + a.m[2][1]*b.m[1][0] + a.m[2][2]*b.m[2][0] + a.m[2][3]*b.m[3][0];
   m[2][1] = a.m[2][0]*b.m[0][1] + a.m[2][1]*b.m[1][1] + a.m[2][2]*b.m[2][1] + a.m[2][3]*b.m[3][1];
   m[2][2] = a.m[2][0]*b.m[0][2] + a.m[2][1]*b.m[1][2] + a.m[2][2]*b.m[2][2] + a.m[2][3]*b.m[3][2];
   m[2][3] = a.m[2][0]*b.m[0][3] + a.m[2][1]*b.m[1][3] + a.m[2][2]*b.m[2][3] + a.m[2][3]*b.m[3][3];

   m[3][0] = a.m[3][0]*b.m[0][0] + a.m[3][1]*b.m[1][0] + a.m[3][2]*b.m[2][0] + a.m[3][3]*b.m[3][0];
   m[3][1] = a.m[3][0]*b.m[0][1] + a.m[3][1]*b.m[1][1] + a.m[3][2]*b.m[2][1] + a.m[3][3]*b.m[3][1];
   m[3][2] = a.m[3][0]*b.m[0][2] + a.m[3][1]*b.m[1][2] + a.m[3][2]*b.m[2][2] + a.m[3][3]*b.m[3][2];
   m[3][3] = a.m[3][0]*b.m[0][3] + a.m[3][1]*b.m[1][3] + a.m[3][2]*b.m[2][3] + a.m[3][3]*b.m[3][3];
}
//-------------------------------------------------------------------------//

/*
template <class Float>
inline void Matrix4<Float>::eulerTransform(Float h, Float p, Float r)
{
   //
   //          | cos(r)cos(h)-sin(r)sin(p)sin(h)  -sin(r)cos(p)  cos(r)sin(h)+sin(r)sin(p)cos(h) |
   // E(h,p,r)=| sin(r)cos(h)+cos(r)sin(p)sin(h)   cos(r)cos(p)  sin(r)sin(h)-cos(r)sin(p)cos(h) |
   //          |-cos(p)sin(h),                     sin(p),       cos(p)cos(h)                    |
   //

   m[0][0]=cos(r)*cos(h) - sin(r)*sin(p)*sin(h);
   m[0][1]=-sin(r)*cos(p);
   m[0][2]=cos(r)*sin(h) + sin(r)*sin(p)*cos(h);

   m[1][0]=sin(r)*cos(h) + cos(r)*sin(p)*sin(h);
   m[1][1]=cos(r)*cos(p);
   m[1][2]=sin(r)*sin(h) - cos(r)*sin(p)*cos(h);

   m[2][0]=-cos(p)*sin(h);
   m[2][1]=sin(p);
   m[2][2]=cos(p)*cos(h);
}
//--------------------------------------------------------------------------//
*/
